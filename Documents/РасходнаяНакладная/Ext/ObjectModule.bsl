
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Оперативный учет
	МетодСписания = РегистрыСведений.УчетнаяПолитика.ПолучитьПоследнее(Дата).МетодСписания;
	
	Если Не ЗначениеЗаполнено(МетодСписания) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не заполнен метод списания учетной политики";
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
	КонецЕсли;        	
	
	Движения.ОстаткиТоваров.БлокироватьДляИзменения = Истина;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	|	РасходнаяНакладнаяСписокНоменклатуры.Номенклатура КАК Номенклатура,
	|	СУММА(РасходнаяНакладнаяСписокНоменклатуры.Количество) КАК Количество,
	|	СУММА(РасходнаяНакладнаяСписокНоменклатуры.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ТабЧасть
	|ИЗ
	|	Документ.РасходнаяНакладная.СписокНоменклатуры КАК РасходнаяНакладнаяСписокНоменклатуры
	|ГДЕ
	|	РасходнаяНакладнаяСписокНоменклатуры.Ссылка = &Ссылка
	|	И НЕ РасходнаяНакладнаяСписокНоменклатуры.Номенклатура.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходнаяНакладнаяСписокНоменклатуры.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабЧасть.Номенклатура,
	|	ТабЧасть.Количество,
	|	ТабЧасть.Сумма
	|ИЗ
	|	ТабЧасть КАК ТабЧасть";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатТЧ = Запрос.Выполнить();
	
	Выборка=РезультатТЧ.Выбрать();
	Пока Выборка.Следующий() Цикл
		Движение=Движения.ОстаткиТоваров.ДобавитьРасход();
		Движение.Период=Дата;
		Движение.Склад=Склад;
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
	КонецЦикла;
	
	Движения.ОстаткиТоваров.Записать();
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ОстаткиТоваровОстатки.Номенклатура,
	|	-ОстаткиТоваровОстатки.КоличествоОстаток КАК Превышение,
	|	ОстаткиТоваровОстатки.Номенклатура.Представление
	|ИЗ
	|	РегистрНакопления.ОстаткиТоваров.Остатки(
	|			&МоментИтоговВключая,
	|			Номенклатура В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура
	|					ИЗ
	|						ТабЧасть КАК Т)
	|				И Склад = &Склад) КАК ОстаткиТоваровОстатки
	|ГДЕ
	|	ОстаткиТоваровОстатки.КоличествоОстаток < 0";
	
	Запрос.УстановитьПараметр("МоментИтоговВключая", Новый Граница(МоментВремени()));
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Превышение остатка по номенклатуре " + Выборка.НОменклатураПредставление + " в количестве " + Выборка.Превышение;
			Сообщение.Сообщить();
		КонецЦикла;
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	
	Движения.ПартииТоваров.Записывать = Истина;
	Движения.ПартииТоваров.Записать();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПартииТоваров");
	ЭлементБлокировки.ИсточникДанных = РезультатТЧ;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	Блокировка.Заблокировать();
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТабЧасть.Номенклатура КАК Номенклатура,
	|	ТабЧасть.Количество КАК Количество,
	|	ТабЧасть.Сумма,
	|	ПартииТоваровОстатки.Партия,
	|	ЕСТЬNULL(ПартииТоваровОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ЕСТЬNULL(ПартииТоваровОстатки.СуммаОстаток, 0) КАК СуммаОстаток
	|ИЗ
	|	ТабЧасть КАК ТабЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваров.Остатки(
	|				&МоментИтогов,
	|				Номенклатура В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура
	|					ИЗ
	|						ТабЧасть КАК Т)) КАК ПартииТоваровОстатки
	|		ПО ТабЧасть.Номенклатура = ПартииТоваровОстатки.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПартииТоваровОстатки.Партия.МоментВремени
	|ИТОГИ
	|	МАКСИМУМ(Количество)
	|ПО
	|	Номенклатура";
	
	Запрос.УстановитьПараметр("МоментИтогов", МоментВремени());
	
	Если МетодСписания = Перечисления.МетодыСписания.ЛИФО Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПартииТоваровОстатки.Партия.МоментВремени", "ПартииТоваровОстатки.Партия.МоментВремени УБЫВ");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаНоменклатура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатура.Следующий() Цикл
		Списать = ВыборкаНоменклатура.Количество;
		Выборка = ВыборкаНоменклатура.Выбрать();
		Пока Выборка.Следующий() и Списать <> 0 Цикл
			Списываем = Мин (Списать, Выборка.КоличествоОстаток);
			Движение = Движения.ПартииТоваров.ДобавитьРасход();
			Движение.Период = Дата;
			Движение.Номенклатура = Выборка.Номенклатура;
			Движение.Партия = Выборка.Партия;
			Движение.Количество = Списываем;			
			Движение.Сумма = Списываем / Выборка.КоличествоОстаток * Выборка.СуммаОстаток;
			
			Списать = Списать - Списываем;
		КонецЦикла;
		
		
	КонецЦикла;	
	
	//Бухгалтерский учет
	Движения.Управленческий.Записывать = Истина;
	Движения.Управленческий.Записать();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Управленческий");
	ЭлементБлокировки.УстановитьЗначение("Счет", ПланыСчетов.Управленческий.Товары);
	ЭлементБлокировки.ИсточникДанных = РезультатТЧ;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных(ПланыВидовХарактеристик.ВидыСубконто.Номенклатура, "Номенклатура");
	Блокировка.Заблокировать();
	
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабЧасть.Номенклатура КАК Номенклатура,
	|	ТабЧасть.Количество КАК Количество,
	|	ЕСТЬNULL(УправленческийОстаткиПоНоменклатуреИСрокам.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	УправленческийОстаткиПоНоменклатуреИСрокам.Субконто2 КАК СрокГодности,
	|	ЕСТЬNULL(УправленческийОстаткиПоНоменклатуре.СуммаОстаток, 0) КАК СуммаОстаток,
	|	ТабЧасть.Номенклатура.Представление
	|ИЗ
	|	ТабЧасть КАК ТабЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Управленческий.Остатки(
	|				&МоментИтогов,
	|				Счет = &СчетТовары,
	|				&СубконтоНоменклатура,
	|				Субконто1 В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура
	|					ИЗ
	|						ТабЧасть КАК Т)) КАК УправленческийОстаткиПоНоменклатуре
	|		ПО ТабЧасть.Номенклатура = УправленческийОстаткиПоНоменклатуре.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Управленческий.Остатки(
	|				&МоментИтогов,
	|				Счет = &СчетТовары,
	|				&СубконтоНоменклатураСрок,
	|				Субконто1 В
	|					(ВЫБРАТЬ
	|						Т.Номенклатура
	|					ИЗ
	|						ТабЧасть КАК Т)) КАК УправленческийОстаткиПоНоменклатуреИСрокам
	|		ПО ТабЧасть.Номенклатура = УправленческийОстаткиПоНоменклатуреИСрокам.Субконто1
	|
	|УПОРЯДОЧИТЬ ПО
	|	СрокГодности
	|ИТОГИ
	|	МАКСИМУМ(Количество),
	|	СУММА(КоличествоОстаток),
	|	МАКСИМУМ(СуммаОстаток)
	|ПО
	|	Номенклатура";
	
	СубконтоНоменклатура = Новый Массив(1);
	СубконтоНоменклатура[0] = ПланыВидовХарактеристик.ВидыСубконто.Номенклатура;
	
	СубконтоНоменклатураСрок = Новый Массив(2);
	СубконтоНоменклатураСрок[0] = ПланыВидовХарактеристик.ВидыСубконто.Номенклатура;
	СубконтоНоменклатураСрок[1] = ПланыВидовХарактеристик.ВидыСубконто.СрокГодности;  
	
	Запрос.УстановитьПараметр("СчетТовары", ПланыСчетов.Управленческий.Товары);
	Запрос.УстановитьПараметр("СубконтоНоменклатура", СубконтоНоменклатура);
	Запрос.УстановитьПараметр("СубконтоНоменклатураСрок", СубконтоНоменклатураСрок);
	
	ВыборкаНоменклатура = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаНоменклатура.Следующий() Цикл
		Превышение = ВыборкаНоменклатура.Количество - ВыборкаНоменклатура.КоличествоОстаток;
		Если Превышение > 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Превышение остатка по номенклатуре " + ВыборкаНоменклатура.НоменклатураПредставление + " в количестве " + Превышение;
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		
		Если Отказ Тогда 
			Продолжить;
		КонецЕсли;
		
		ОсталосьСписать = ВыборкаНоменклатура.Количество;
		
		СуммаПоНоменклатуре = ВыборкаНоменклатура.СуммаОстаток;
		КоличествоПоНоменклатуре = ВыборкаНоменклатура.КоличествоОстаток;
		
		КоличествоОсталосьСписать = ВыборкаНоменклатура.КоличествоОстаток;		
		СуммаОсталосьСписать = ВыборкаНоменклатура.СуммаОстаток;
		
		Выборка = ВыборкаНоменклатура.Выбрать();
		Пока Выборка.Следующий() И ОсталосьСписать <> 0 Цикл
			КоличествоСписываем = Мин (Выборка.КоличествоОстаток, ОсталосьСписать);
			Проводка = Движения.Управленческий.Добавить();
			Проводка.Период = Дата;
			Проводка.СчетДт = ПланыСчетов.Управленческий.ПрибылиУбытки;
			Проводка.СчетКт = ПланыСчетов.Управленческий.Товары;
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.Номенклатура] = Выборка.Номенклатура;				 
			Проводка.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконто.СрокГодности] = Выборка.СрокГодности;				 
			Проводка.КоличествоКт = КоличествоСписываем;
			
			Если КоличествоСписываем = КоличествоОсталосьСписать Тогда
				СуммаСписываем = СуммаОсталосьСписать;
			Иначе
				СуммаСписываем = Окр (КоличествоСписываем / КоличествоПоНоменклатуре * СуммаПоНоменклатуре, 2);
			КонецЕсли;
			
			Проводка.Сумма = СуммаСписываем;
			
			КоличествоОсталосьСписать = КоличествоОсталосьСписать - КоличествоСписываем;
			СуммаОсталосьСписать = СуммаОсталосьСписать - СуммаСписываем;		
			
			ОсталосьСписать = ОсталосьСписать - КоличествоСписываем;
			
		КонецЦикла;                          
	КонецЦикла;
	
	Проводка = Движения.Управленческий.Добавить();
	Проводка.Период = Дата;
	Проводка.СчетДт = ПланыСчетов.Управленческий.Покупатели;
	Проводка.СчетКт = ПланыСчетов.Управленческий.ПрибылиУбытки;
	Проводка.Сумма = СписокНоменклатуры.Итог("Сумма");	
		
КонецПроцедуры
	
